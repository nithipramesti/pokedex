{"version":3,"sources":["App.jsx","reportWebVitals.js","index.js"],"names":["App","useState","pokemonData","setPokemonData","filteredPokemonData","setFilteredPokemonData","searchValue","setSearchValue","activePokemon","setActivePokemon","getPokemonData","pokemonUrl","Axios","get","then","res","currentData","data","useEffect","sort","a","b","id","arr","offset","setOffset","loadPokemon","setLoadPokemon","results","console","log","forEach","val","index","url","className","type","name","onChange","event","target","value","placeholder","onClick","xmlns","width","height","fill","class","viewBox","d","map","pokemon","img_url","sprites","versions","animated","front_default","style","backgroundImage","forms","types","src","other","alt","baseStat","totalStatVal","stats","barWidth","base_stat","push","getPokemonStats","renderSelectedPokemon","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c3e1f699.chunk.js","sourcesContent":["import \"./App.css\";\nimport Axios from \"axios\";\nimport React, { useEffect, useState } from \"react\";\n\nfunction App() {\n  const [pokemonData, setPokemonData] = useState([]);\n\n  const [filteredPokemonData, setFilteredPokemonData] = useState([]);\n  const [searchValue, setSearchValue] = useState(\"\");\n  const [activePokemon, setActivePokemon] = useState(0);\n\n  //Function to fetch pokemon data\n  const getPokemonData = (pokemonUrl) => {\n    Axios.get(pokemonUrl).then((res) => {\n      setPokemonData((currentData) => [...currentData, res.data]);\n    });\n  };\n\n  //fetched data is not sorted, so data need to be sorted here:\n  useEffect(() => {\n    pokemonData.sort((a, b) => a.id - b.id);\n\n    let arr = [...pokemonData];\n    setFilteredPokemonData([...arr]);\n  }, [pokemonData]);\n\n  const searchHandler = (event) => {\n    setSearchValue(event.target.value);\n  };\n\n  const searchPokemon = () => {\n    Axios.get(`https://pokeapi.co/api/v2/pokemon/${searchValue}`).then(\n      (res) => {\n        setActivePokemon(res.data);\n      }\n    );\n  };\n\n  //Render all Pokemon cards\n  const renderAllPokemon = () => {\n    console.log(pokemonData);\n\n    return filteredPokemonData.map((pokemon) => {\n      const img_url = `url(${pokemon.sprites.versions[\"generation-v\"][\"black-white\"].animated.front_default})`;\n\n      const getPokemonTypes = () => {\n        return pokemon.types.map((val) => {\n          return <span>{val.type.name}</span>;\n        });\n      };\n\n      return (\n        <div className=\"pokemon-card\" onClick={() => setActivePokemon(pokemon)}>\n          <div\n            className=\"pokemon-img\"\n            style={{ backgroundImage: img_url }}\n          ></div>\n          <p className=\"pokemon-id\">#{pokemon.id}</p>\n          <h3 className=\"pokemon-name\">{pokemon.forms[0].name}</h3>\n          <p className=\"pokemon-type\">{getPokemonTypes()}</p>\n        </div>\n      );\n    });\n  };\n\n  //Render selected pokemon\n  const renderSelectedPokemon = () => {\n    let pokemon = activePokemon;\n\n    const getPokemonTypes = () => {\n      return pokemon.types.map((val) => {\n        return <span>{val.type.name}</span>;\n      });\n    };\n\n    const getPokemonStats = () => {\n      let baseStat = [];\n      let totalStatVal = 0;\n\n      baseStat = pokemon.stats.map((val, index) => {\n        const statName = [\n          \"HP\",\n          \"Attack\",\n          \"Defense\",\n          \"Sp. Atk\",\n          \"Sp. Def\",\n          \"Speed\",\n        ];\n        const barWidth = (val.base_stat / 255) * 100;\n\n        totalStatVal += val.base_stat;\n\n        return (\n          <tr>\n            <td className=\"stat-name\">{statName[index]}</td>\n            <td className=\"stat-val\">{val.base_stat}</td>\n            <td>\n              <div\n                className={`stat-bar ${\n                  val.base_stat > 149\n                    ? `ultimate-high`\n                    : val.base_stat > 124\n                    ? `very-high`\n                    : val.base_stat > 99\n                    ? `high`\n                    : ``\n                }`}\n                style={{ width: `${barWidth}%` }}\n              ></div>\n            </td>\n          </tr>\n        );\n      });\n\n      baseStat.push(\n        <tr>\n          <td className=\"stat-name\">Total</td>\n          <td className=\"stat-val total\">{totalStatVal}</td>\n          <td></td>\n        </tr>\n      );\n\n      return baseStat;\n    };\n\n    return (\n      <div className=\"selected-pokemon-container\">\n        <img\n          className=\"pokemon-img-artwork\"\n          src={pokemon.sprites.other[\"official-artwork\"].front_default}\n          alt=\"\"\n        />\n        <p className=\"pokemon-id\">#{pokemon.id}</p>\n        <h2 className=\"pokemon-name\">{pokemon.forms[0].name}</h2>\n        <p className=\"pokemon-type\">{getPokemonTypes()}</p>\n        <table className=\"pokemon-stats-container\">{getPokemonStats()}</table>\n      </div>\n    );\n  };\n\n  const [offset, setOffset] = useState(9);\n  const [loadPokemon, setLoadPokemon] = useState(false);\n\n  const loadMore = () => {\n    setLoadPokemon(true);\n\n    Axios.get(\n      `https://pokeapi.co/api/v2/pokemon?limit=9&offset=${offset}`\n    ).then((res) => {\n      const data = res.data.results;\n      console.log(data);\n\n      data.forEach((val, index) => {\n        getPokemonData(val.url, index);\n      });\n\n      setOffset(offset + 9);\n      setLoadPokemon(false);\n    });\n  };\n\n  //Fetch all pokemon data (name & API url)\n  useEffect(() => {\n    Axios.get(`https://pokeapi.co/api/v2/pokemon?limit=9)`).then((res) => {\n      const data = res.data.results;\n      console.log(data);\n\n      data.forEach((val, index) => {\n        getPokemonData(val.url, index);\n      });\n\n      Axios.get(`https://pokeapi.co/api/v2/pokemon/1`).then((res) => {\n        setActivePokemon(res.data);\n      });\n    });\n  }, []);\n\n  return (\n    <div className=\"app\">\n      <h1>Pokédex</h1>\n\n      <div className=\"pokedex-container\">\n        <div className=\"all-pokemon-container\">\n          <div className=\"search-container\">\n            <input\n              type=\"text\"\n              name=\"searchBar\"\n              onChange={searchHandler}\n              id=\"search-bar\"\n              placeholder=\"Search Pokémon by name or id\"\n            />\n            <button className=\"search-button\" onClick={searchPokemon}>\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                width=\"16\"\n                height=\"16\"\n                fill=\"currentColor\"\n                class=\"bi bi-search\"\n                viewBox=\"0 0 16 16\"\n              >\n                <path d=\"M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001c.03.04.062.078.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1.007 1.007 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0z\" />\n              </svg>\n            </button>\n          </div>\n\n          <div className=\"card-container\">\n            {renderAllPokemon()}\n            <button className=\"load-more\" onClick={loadMore}>\n              {`${loadPokemon ? \"Loading...\" : \"Load More\"}`}\n            </button>\n          </div>\n        </div>\n        {activePokemon && renderSelectedPokemon()}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}