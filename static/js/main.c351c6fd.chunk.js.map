{"version":3,"sources":["App.jsx","reportWebVitals.js","index.js"],"names":["App","useState","pokemonData","setPokemonData","filteredPokemonData","setFilteredPokemonData","activePokemon","setActivePokemon","useEffect","sort","a","b","id","arr","Axios","get","then","res","data","results","console","log","forEach","val","index","pokemonUrl","url","currentData","className","type","name","onChange","event","filteredData","searchValue","target","value","filter","isNaN","forms","includes","toLowerCase","placeholder","xmlns","width","height","fill","class","viewBox","d","map","pokemon","img_url","sprites","versions","animated","front_default","onClick","style","backgroundImage","types","other","src","alt","baseStat","totalStatVal","stats","barWidth","base_stat","push","getPokemonStats","renderSelectedPokemon","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c351c6fd.chunk.js","sourcesContent":["import \"./App.css\";\nimport Axios from \"axios\";\nimport React, { useEffect, useState } from \"react\";\n\nfunction App() {\n  const [pokemonData, setPokemonData] = useState([]);\n\n  const [filteredPokemonData, setFilteredPokemonData] = useState([]);\n\n  const [activePokemon, setActivePokemon] = useState(0);\n\n  //Function for fetching pokemon data\n  const getPokemonData = (pokemonUrl, index) => {\n    Axios.get(pokemonUrl).then((res) => {\n      setPokemonData((currentData) => [...currentData, res.data]);\n      // console.log(res.data.forms[0].name)\n    });\n  };\n\n  useEffect(() => {\n    pokemonData.sort((a, b) => a.id - b.id);\n\n    let arr = [...pokemonData];\n    setFilteredPokemonData([...arr]);\n  }, [pokemonData]);\n\n  //Function for handling search\n  const searchHandler = (event) => {\n    let filteredData = [];\n    let searchValue = event.target.value;\n    filteredData = pokemonData.filter((val) => {\n      if (searchValue === \"\" || isNaN(searchValue)) {\n        return val.forms[0].name.includes(searchValue.toLowerCase());\n      } else {\n        return val.id == searchValue;\n      }\n    });\n    setFilteredPokemonData([...filteredData]);\n\n    console.log(pokemonData);\n    console.log(event.target.value.toLowerCase());\n  };\n\n  //Render all Pokemon cards\n  const renderAllPokemon = () => {\n    console.log(pokemonData);\n\n    return filteredPokemonData.map((pokemon) => {\n      const img_url = `url(${pokemon.sprites.versions[\"generation-v\"][\"black-white\"].animated.front_default})`;\n\n      const getPokemonTypes = () => {\n        return pokemon.types.map((val) => {\n          return <span>{val.type.name}</span>;\n        });\n      };\n      // const img_color =\n\n      return (\n        <div\n          className=\"pokemon-card\"\n          onClick={() => setActivePokemon(pokemon.id - 1)}\n        >\n          <div\n            className=\"pokemon-img\"\n            style={{ backgroundImage: img_url }}\n          ></div>\n          <p className=\"pokemon-id\">\n            {pokemon.id < 100\n              ? pokemon.id < 10\n                ? `#00${pokemon.id}`\n                : `#0${pokemon.id}`\n              : `#${pokemon.id}`}\n          </p>\n          <h3 className=\"pokemon-name\">{pokemon.forms[0].name}</h3>\n          <p className=\"pokemon-type\">{getPokemonTypes()}</p>\n        </div>\n      );\n    });\n  };\n\n  //Render selected pokemon\n  const renderSelectedPokemon = () => {\n    let pokemon = pokemonData[activePokemon];\n\n    const img_url = pokemon.sprites.other[\"official-artwork\"].front_default;\n\n    const getPokemonTypes = () => {\n      return pokemon.types.map((val) => {\n        return <span>{val.type.name}</span>;\n      });\n    };\n\n    const getPokemonStats = () => {\n      let baseStat = [];\n      let totalStatVal = 0;\n\n      baseStat = pokemon.stats.map((val, index) => {\n        const statName = [\n          \"HP\",\n          \"Attack\",\n          \"Defense\",\n          \"Sp. Atk\",\n          \"Sp. Def\",\n          \"Speed\",\n        ];\n        const barWidth = (val.base_stat / 255) * 100;\n\n        totalStatVal += val.base_stat;\n\n        return (\n          <tr>\n            <td className=\"stat-name\">{statName[index]}</td>\n            <td className=\"stat-val\">{val.base_stat}</td>\n            <td>\n              <div\n                className={`stat-bar ${\n                  val.base_stat > 149\n                    ? `ultimate-high`\n                    : val.base_stat > 124\n                    ? `very-high`\n                    : val.base_stat > 99\n                    ? `high`\n                    : ``\n                }`}\n                style={{ width: `${barWidth}%` }}\n              ></div>\n            </td>\n          </tr>\n        );\n      });\n\n      baseStat.push(\n        <tr>\n          <td className=\"stat-name\">Total</td>\n          <td className=\"stat-val total\">{totalStatVal}</td>\n          <td></td>\n        </tr>\n      );\n\n      return baseStat;\n    };\n\n    return (\n      <div className=\"selected-pokemon-container\">\n        <img className=\"pokemon-img-artwork\" src={img_url} alt=\"\" />\n        <p className=\"pokemon-id\">\n          {pokemon.id < 100\n            ? pokemon.id < 10\n              ? `#00${pokemon.id}`\n              : `#0${pokemon.id}`\n            : `#${pokemon.id}`}\n        </p>\n        <h2 className=\"pokemon-name\">{pokemon.forms[0].name}</h2>\n        <p className=\"pokemon-type\">{getPokemonTypes()}</p>\n        <table className=\"pokemon-stats-container\">{getPokemonStats()}</table>\n      </div>\n    );\n  };\n\n  //Fetch all pokemon data (name & API url)\n  useEffect(() => {\n    Axios.get(`https://pokeapi.co/api/v2/pokemon?limit=386`).then((res) => {\n      const data = res.data.results;\n      console.log(data);\n\n      data.forEach((val, index) => {\n        getPokemonData(val.url, index);\n      });\n    });\n  }, []);\n\n  return (\n    <div className=\"app\">\n      <h1>Pokédex</h1>\n\n      <div className=\"pokedex-container\">\n        <div className=\"all-pokemon-container\">\n          <div className=\"search-container\">\n            <input\n              type=\"text\"\n              name=\"searchBar\"\n              onChange={searchHandler}\n              id=\"search-bar\"\n              placeholder=\"Search Pokémon by name or number\"\n            />\n            <button className=\"search-button\">\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                width=\"16\"\n                height=\"16\"\n                fill=\"currentColor\"\n                class=\"bi bi-search\"\n                viewBox=\"0 0 16 16\"\n              >\n                <path d=\"M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001c.03.04.062.078.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1.007 1.007 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0z\" />\n              </svg>\n            </button>\n          </div>\n\n          <div className=\"card-container\">{renderAllPokemon()}</div>\n        </div>\n        {pokemonData[activePokemon] && renderSelectedPokemon()}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}